{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-05T05:25:13.496882Z","iopub.execute_input":"2025-09-05T05:25:13.497248Z","iopub.status.idle":"2025-09-05T05:25:16.047805Z","shell.execute_reply.started":"2025-09-05T05:25:13.497222Z","shell.execute_reply":"2025-09-05T05:25:16.046738Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"sales = pd.DataFrame({\n    'id': [101, 102, 103, 104, 105, 106],\n    'client_id': [1, 2, 1, 3, 4, 5],  # client_id = 4 and 5 not in clients\n    'item': ['TechBook Pro 15', 'ViewMax 24HD', 'KeyPro MX', 'TechBook Air', 'ClickOne Mini', 'SoundX Pro'],\n    'amount': [1200, 300, 100, 1300, 50, 500]\n})\n\nclients = pd.DataFrame({\n    'client_id': [1, 2, 3, 6],  # client_id = 6 is not in sales\n    'client_name': ['Alice', 'Bob', 'Charlie', 'Diana'],\n    'region_id': [10, 11, 10, 12]\n})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T05:25:18.736232Z","iopub.execute_input":"2025-09-05T05:25:18.736577Z","iopub.status.idle":"2025-09-05T05:25:18.749344Z","shell.execute_reply.started":"2025-09-05T05:25:18.736548Z","shell.execute_reply":"2025-09-05T05:25:18.748244Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"#find users who placed an order but are absent in \"clients\":\n#first, merge datasets with outer to see all values, including nans:\ndf = sales.merge(clients, on = 'client_id', how = 'outer')\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T05:25:26.429433Z","iopub.execute_input":"2025-09-05T05:25:26.429727Z","iopub.status.idle":"2025-09-05T05:25:26.494128Z","shell.execute_reply.started":"2025-09-05T05:25:26.429704Z","shell.execute_reply":"2025-09-05T05:25:26.493077Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"      id  client_id             item  amount client_name  region_id\n0  101.0          1  TechBook Pro 15  1200.0       Alice       10.0\n1  103.0          1        KeyPro MX   100.0       Alice       10.0\n2  102.0          2     ViewMax 24HD   300.0         Bob       11.0\n3  104.0          3     TechBook Air  1300.0     Charlie       10.0\n4  105.0          4    ClickOne Mini    50.0         NaN        NaN\n5  106.0          5       SoundX Pro   500.0         NaN        NaN\n6    NaN          6              NaN     NaN       Diana       12.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>client_id</th>\n      <th>item</th>\n      <th>amount</th>\n      <th>client_name</th>\n      <th>region_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>101.0</td>\n      <td>1</td>\n      <td>TechBook Pro 15</td>\n      <td>1200.0</td>\n      <td>Alice</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>103.0</td>\n      <td>1</td>\n      <td>KeyPro MX</td>\n      <td>100.0</td>\n      <td>Alice</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>102.0</td>\n      <td>2</td>\n      <td>ViewMax 24HD</td>\n      <td>300.0</td>\n      <td>Bob</td>\n      <td>11.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>104.0</td>\n      <td>3</td>\n      <td>TechBook Air</td>\n      <td>1300.0</td>\n      <td>Charlie</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>105.0</td>\n      <td>4</td>\n      <td>ClickOne Mini</td>\n      <td>50.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>106.0</td>\n      <td>5</td>\n      <td>SoundX Pro</td>\n      <td>500.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>NaN</td>\n      <td>6</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Diana</td>\n      <td>12.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"#now from the resulting dataframe, find users who placed an order but are absent in \"clients\":\nabsent_clients = df.loc[df['client_name'].isna(), 'client_id'].tolist()\nprint(f\"Ids of clients who placed order but are absent in the client list are: {absent_clients}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T05:25:59.842782Z","iopub.execute_input":"2025-09-05T05:25:59.843124Z","iopub.status.idle":"2025-09-05T05:25:59.850173Z","shell.execute_reply.started":"2025-09-05T05:25:59.843098Z","shell.execute_reply":"2025-09-05T05:25:59.849220Z"}},"outputs":[{"name":"stdout","text":"Ids of clients who placed order but are absent in the client list are: [4, 5]\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"#find how many user didn't place order:\nno_order_clients = len(df.loc[df['item'].isna()])\nprint(f\"The number of clients who didn't place order is: {no_order_clients}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T05:26:08.763462Z","iopub.execute_input":"2025-09-05T05:26:08.763785Z","iopub.status.idle":"2025-09-05T05:26:08.771082Z","shell.execute_reply.started":"2025-09-05T05:26:08.763757Z","shell.execute_reply":"2025-09-05T05:26:08.770036Z"}},"outputs":[{"name":"stdout","text":"The number of clients who didn't place order is: 1\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"#replace nans in \"client_name\" with \"Unknown client\"\n#replace nans in \"item\" with \"No order\"\ndf[\"client_name\"] = df[\"client_name\"].fillna(\"Unknown client\") #use fillna\ndf[\"item\"] = np.where(df[\"item\"].isna(), \"No order\", df[\"item\"]) #use np.where()\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T05:45:30.650661Z","iopub.execute_input":"2025-09-05T05:45:30.650992Z","iopub.status.idle":"2025-09-05T05:45:30.665946Z","shell.execute_reply.started":"2025-09-05T05:45:30.650967Z","shell.execute_reply":"2025-09-05T05:45:30.664980Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"      id  client_id             item  amount     client_name  region_id\n0  101.0          1  TechBook Pro 15  1200.0           Alice       10.0\n1  103.0          1        KeyPro MX   100.0           Alice       10.0\n2  102.0          2     ViewMax 24HD   300.0             Bob       11.0\n3  104.0          3     TechBook Air  1300.0         Charlie       10.0\n4  105.0          4    ClickOne Mini    50.0  Unknown client        NaN\n5  106.0          5       SoundX Pro   500.0  Unknown client        NaN\n6    NaN          6         No order     NaN           Diana       12.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>client_id</th>\n      <th>item</th>\n      <th>amount</th>\n      <th>client_name</th>\n      <th>region_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>101.0</td>\n      <td>1</td>\n      <td>TechBook Pro 15</td>\n      <td>1200.0</td>\n      <td>Alice</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>103.0</td>\n      <td>1</td>\n      <td>KeyPro MX</td>\n      <td>100.0</td>\n      <td>Alice</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>102.0</td>\n      <td>2</td>\n      <td>ViewMax 24HD</td>\n      <td>300.0</td>\n      <td>Bob</td>\n      <td>11.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>104.0</td>\n      <td>3</td>\n      <td>TechBook Air</td>\n      <td>1300.0</td>\n      <td>Charlie</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>105.0</td>\n      <td>4</td>\n      <td>ClickOne Mini</td>\n      <td>50.0</td>\n      <td>Unknown client</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>106.0</td>\n      <td>5</td>\n      <td>SoundX Pro</td>\n      <td>500.0</td>\n      <td>Unknown client</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>NaN</td>\n      <td>6</td>\n      <td>No order</td>\n      <td>NaN</td>\n      <td>Diana</td>\n      <td>12.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"#show the each client's number of orders:\n#this is tricky because \"No order\" is just another item for the program and it'll count it as such.\n#to solve this problem, group clients with itesm, create boolean mask on \"No order\", where item != No order is True, item == No order is False\n#for each group, sum up True(1) and False(0)\nnumber_of_orders = df.groupby('client_name')['item'].apply(lambda x: (x != 'No order').sum())\nnumber_of_orders = pd.DataFrame(number_of_orders).reset_index()\nnumber_of_orders.columns = ['Client', 'Number_of_orders']\nnumber_of_orders.sort_values(by = 'Number_of_orders', ascending = False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-05T06:53:10.029376Z","iopub.execute_input":"2025-09-05T06:53:10.029689Z","iopub.status.idle":"2025-09-05T06:53:10.043309Z","shell.execute_reply.started":"2025-09-05T06:53:10.029664Z","shell.execute_reply":"2025-09-05T06:53:10.042413Z"}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"           Client  Number_of_orders\n0           Alice                 2\n4  Unknown client                 2\n1             Bob                 1\n2         Charlie                 1\n3           Diana                 0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Client</th>\n      <th>Number_of_orders</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Alice</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Unknown client</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Bob</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Charlie</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Diana</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":20}]}